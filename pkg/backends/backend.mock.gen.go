// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go
//
// Generated by this command:
//
//	mockgen -source=backend.go -destination=backend.mock.gen.go -package backends
//

// Package backends is a generated GoMock package.
package backends

import (
	context "context"
	reflect "reflect"

	fuse "github.com/hanwen/go-fuse/v2/fuse"
	gomock "go.uber.org/mock/gomock"
)

// MockDirectory is a mock of Directory interface.
type MockDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryMockRecorder
	isgomock struct{}
}

// MockDirectoryMockRecorder is the mock recorder for MockDirectory.
type MockDirectoryMockRecorder struct {
	mock *MockDirectory
}

// NewMockDirectory creates a new mock instance.
func NewMockDirectory(ctrl *gomock.Controller) *MockDirectory {
	mock := &MockDirectory{ctrl: ctrl}
	mock.recorder = &MockDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectory) EXPECT() *MockDirectoryMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockDirectory) CreateDirectory(ctx context.Context, name string) (Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", ctx, name)
	ret0, _ := ret[0].(Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockDirectoryMockRecorder) CreateDirectory(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockDirectory)(nil).CreateDirectory), ctx, name)
}

// CreateFile mocks base method.
func (m *MockDirectory) CreateFile(ctx context.Context, name string) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, name)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockDirectoryMockRecorder) CreateFile(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockDirectory)(nil).CreateFile), ctx, name)
}

// GetAttributes mocks base method.
func (m *MockDirectory) GetAttributes(ctx context.Context) (fuse.Attr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes", ctx)
	ret0, _ := ret[0].(fuse.Attr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockDirectoryMockRecorder) GetAttributes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockDirectory)(nil).GetAttributes), ctx)
}

// GetDirectory mocks base method.
func (m *MockDirectory) GetDirectory(ctx context.Context, name string) (Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectory", ctx, name)
	ret0, _ := ret[0].(Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockDirectoryMockRecorder) GetDirectory(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockDirectory)(nil).GetDirectory), ctx, name)
}

// GetFile mocks base method.
func (m *MockDirectory) GetFile(ctx context.Context, name string) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, name)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockDirectoryMockRecorder) GetFile(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockDirectory)(nil).GetFile), ctx, name)
}

// ListEntries mocks base method.
func (m *MockDirectory) ListEntries(ctx context.Context) ([]fuse.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", ctx)
	ret0, _ := ret[0].([]fuse.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockDirectoryMockRecorder) ListEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockDirectory)(nil).ListEntries), ctx)
}

// RemoveDirectory mocks base method.
func (m *MockDirectory) RemoveDirectory(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDirectory", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDirectory indicates an expected call of RemoveDirectory.
func (mr *MockDirectoryMockRecorder) RemoveDirectory(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDirectory", reflect.TypeOf((*MockDirectory)(nil).RemoveDirectory), ctx, name)
}

// RemoveFile mocks base method.
func (m *MockDirectory) RemoveFile(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockDirectoryMockRecorder) RemoveFile(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockDirectory)(nil).RemoveFile), ctx, name)
}

// RenameNode mocks base method.
func (m *MockDirectory) RenameNode(ctx context.Context, name string, newParent Directory, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNode", ctx, name, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNode indicates an expected call of RenameNode.
func (mr *MockDirectoryMockRecorder) RenameNode(ctx, name, newParent, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNode", reflect.TypeOf((*MockDirectory)(nil).RenameNode), ctx, name, newParent, newName)
}

// SetAttributes mocks base method.
func (m *MockDirectory) SetAttributes(ctx context.Context, in *fuse.SetAttrIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAttributes", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAttributes indicates an expected call of SetAttributes.
func (mr *MockDirectoryMockRecorder) SetAttributes(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributes", reflect.TypeOf((*MockDirectory)(nil).SetAttributes), ctx, in)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// GetAttributes mocks base method.
func (m *MockFile) GetAttributes(ctx context.Context) (fuse.Attr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes", ctx)
	ret0, _ := ret[0].(fuse.Attr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockFileMockRecorder) GetAttributes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockFile)(nil).GetAttributes), ctx)
}

// Read mocks base method.
func (m *MockFile) Read(ctx context.Context, start, end uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, start, end)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), ctx, start, end)
}

// SetAttributes mocks base method.
func (m *MockFile) SetAttributes(ctx context.Context, in *fuse.SetAttrIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAttributes", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAttributes indicates an expected call of SetAttributes.
func (mr *MockFileMockRecorder) SetAttributes(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributes", reflect.TypeOf((*MockFile)(nil).SetAttributes), ctx, in)
}

// Sync mocks base method.
func (m *MockFile) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockFileMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockFile)(nil).Sync), ctx)
}

// WriteCache mocks base method.
func (m *MockFile) WriteCache(ctx context.Context, data []byte, off int64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCache", ctx, data, off)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteCache indicates an expected call of WriteCache.
func (mr *MockFileMockRecorder) WriteCache(ctx, data, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCache", reflect.TypeOf((*MockFile)(nil).WriteCache), ctx, data, off)
}
